package Algo;

import java.util.Arrays;

public class RaddixSort {
	static int TFC;
    public static void radixSort(int[] arr) {
    	TFC++;
        int max = Arrays.stream(arr).max().orElse(0);
        TFC++;
        TFC++;
        for (int exp = 1; max / exp > 0; exp *= 10) {
            int n = arr.length;
            TFC++;
            int[] output = new int[n];
            TFC++;
            int[] count = new int[10];
            TFC++;

            Arrays.fill(count, 0);
            TFC++;
            TFC++;
            for (int i = 0; i < n; i++)
                count[(arr[i] / exp) % 10]++;
            	TFC++;
            for (int i = 1; i < 10; i++)
                count[i] += count[i - 1];
            	TFC++;
            for (int i = n - 1; i >= 0; i--) {
                output[--count[(arr[i] / exp) % 10]] = arr[i];
                TFC++;
                
            }
            TFC+=4;
            System.arraycopy(output, 0, arr, 0, n);
        }
    }

    public static void main(String[] args) {
        int[] inputArray = {284,84,300,784,877,713,405,585,288,657,980,542,35,54,293,644,722,831,604,4,616,583,716,38,527,732,634,570,801,701,58,212,277,337,907,104,414,848,983,819,893,6,450,943,674,107,153,993,501,339,580,929,298,595,879,746,397,529,185,404,571,930,607,558,169,489,669,381,234,426,845,586,898,18,394,204,422,83,810,698,543,89,754,8,523,903,500,503,181,371,640,750,480,392,600,481,251,469,70,250,717,649,935,656,589,155,946,91,474,26,249,971,572,109,852,775,663,447,19,932,13,399,110,163,938,989,349,76,499,463,493,317,1,596,195,857,255,853,606,838,304,456,994,220,565,953,215,687,124,528,861,782,410,630,721,491,106,871,708,94,387,138,207,210,454,68,665,87,335,261,507,939,807,22,435,832,652,262,668,37,354,818,624,497,236,508,471,952,997,916,685,323,421,726,102,23,151,370,332,479,673,936,575,130,785,248,537,158,409,148,377,313,11,218,790,999,413,524,368,544,286,177,285,281,650,546,553,268,99,800,577,123,576,693,433,373,206,958,243,850,651,209,864,737,736,742,438,789,786,614,386,157,484,122,294,375,858,899,859,888,180,538,622,613,773,444,82,760,897,364,93,429,517,178,265,827,977,510,303,150,794,458,66,417,922,356,533,945,928,326,96,723,440,65,919,778,291,679,764,168,239,439,554,924,811,906,748,175,74,235,591,979,727,678,724,626,390,608,134,340,633,441,584,889,967,986,33,431,361,126,238,834,406,485,152,380,119,714,78,141,766,143,270,548,805,696,761,835,384,483,518,353,73,67,647,781,325,816,242,917,334,894,111,113,707,883,632,842,330,599,201,342,56,574,273,926,699,941,648,522,407,16,759,837,176,730,562,162,457,566,695,905,749,525,114,802,214,710,581,881,312,101,125,198,561,199,904,731,718,393,100,465,496,715,473,976,618,382,170,324,623,839,611,927,536,921,347,276,228,840,910,985,804,660,582,998,290,279,425,645,969,179,780,949,115,466,940,222,105,817,98,788,246,385,915,806,137,455,427,267,395,223,901,756,252,205,619,530,735,112,796,682,836,327,815,59,10,369,950,918,635,139,880,758,39,874,31,849,203,63,468,739,551,305,814,193,972,183,944,219,53,594,86,752,844,688,825,885,974,867,233,712,579,588,182,400,200,348,559,552,412,127,376,197,902,402,359,511,504,549,321,231,603,793,34,681,772,532,266,436,343,711,374,166,621,912,520,69,318,884,403,539,14,908,992,719,578,85,345,670,344,914,27,187,795,411,988,913,625,560,531,960,36,336,934,851,149,765,486,264,43,705,28,920,931,97,230,269,828,892,320,71,372,131,460,77,753,488,196,51,830,467,416,747,947,975,190,703,870,120,990,226,627,75,129,955,25,909,237,132,408,295,62,610,951,882,865,445,271,259,598,956,692,803,636,697,362,302,965,755,774,470,244,609,142,316,310,156,189,550,30,664,308,194,165,516,564,568,672,388,661,593,319,659,725,869,875,638,482,689,487,605,628,229,981,629,569,820,757,545,160,462,1000,700,174,128,973,452,358,225,118,464,666,826,769,494,942,12,378,779,24,144,29,217,933,363,891,379,434,743,333,690,686,771,733,328,5,868,7,706,900,47,961,446,813,341,492,52,315,676,311,287,631,383,282,92,846,20,365,173,704,154,289,32,472,592,95,241,257,987,767,428,80,240,684,556,744,498,513,391,442,184,534,957,833,966,46,798,430,258,653,823,770,505,567,41,272,847,188,121,88,108,991,103,658,338,787,738,662,978,44,641,136,797,751,17,667,164,57,982,995,963,887,135,890,3,808,202,959,418,415,602,171,396,389,256,449,984,301,937,512,694,352,923,245,612,709,519,50,680,280,911,812,247,346,792,117,461,573,423,862,970,90,401,167,675,366,860,526,296,224,81,475,886,863,590,227,254,309,437,996,763,21,146,60,521,745,540,221,306,873,824,964,314,443,514,601,357,147,133,777,728,161,617,506,208,263,925,783,398,563,642,186,253,646,876,643,762,40,809,895,954,453,9,855,547,541,2,451,140,799,615,654,64,191,420,213,490,49,776,432,211,292,620,587,896,476,878,478,702,597,509,322,72,116,275,741,843,822,419,299,329,555,740,15,192,557,515,671,872,274,729,866,821,216,655,260,307,42,734,962,172,360,683,278,424,768,639,495,145,232,854,351,720,459,297,367,535,502,856,283,448,637,350,55,841,159,355,968,677,45,331,829,948,477,691,61,791,48,79};  
        TFC++;
        radixSort(inputArray);
        TFC++;
        System.out.println(Arrays.toString(inputArray));
        TFC+=4;
        System.out.println("Total Frequency Count: " + TFC);
    }
}



